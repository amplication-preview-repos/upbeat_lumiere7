/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TutorProfile } from "./TutorProfile";
import { TutorProfileCountArgs } from "./TutorProfileCountArgs";
import { TutorProfileFindManyArgs } from "./TutorProfileFindManyArgs";
import { TutorProfileFindUniqueArgs } from "./TutorProfileFindUniqueArgs";
import { DeleteTutorProfileArgs } from "./DeleteTutorProfileArgs";
import { TutorProfileService } from "../tutorProfile.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TutorProfile)
export class TutorProfileResolverBase {
  constructor(
    protected readonly service: TutorProfileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TutorProfile",
    action: "read",
    possession: "any",
  })
  async _tutorProfilesMeta(
    @graphql.Args() args: TutorProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TutorProfile])
  @nestAccessControl.UseRoles({
    resource: "TutorProfile",
    action: "read",
    possession: "any",
  })
  async tutorProfiles(
    @graphql.Args() args: TutorProfileFindManyArgs
  ): Promise<TutorProfile[]> {
    return this.service.tutorProfiles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TutorProfile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TutorProfile",
    action: "read",
    possession: "own",
  })
  async tutorProfile(
    @graphql.Args() args: TutorProfileFindUniqueArgs
  ): Promise<TutorProfile | null> {
    const result = await this.service.tutorProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TutorProfile)
  @nestAccessControl.UseRoles({
    resource: "TutorProfile",
    action: "delete",
    possession: "any",
  })
  async deleteTutorProfile(
    @graphql.Args() args: DeleteTutorProfileArgs
  ): Promise<TutorProfile | null> {
    try {
      return await this.service.deleteTutorProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async FindTutorsByLocation(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.FindTutorsByLocation(args);
  }

  @graphql.Query(() => String)
  async RegisterTutor(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.RegisterTutor(args);
  }
}
